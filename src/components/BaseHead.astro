---

import '../styles/index.css';
import { SITE_TITLE } from "../consts";

import {SEO} from "astro-seo"

import {join} from "path"

import "@fontsource-variable/vollkorn";
import "@fontsource-variable/exo-2";
import "@fontsource/overpass-mono";

export interface HeadOptions {
	title: string
	description: string
	image?: {
		src: string,
		alt: string
	} 
	noindex?: boolean
	nofollow?: boolean
	type?: "article" | "string",
	article?: {
		publishedTime: string,
		modifiedTime?: string,
		authors: string[],
		tags: string[]
	}
}

interface Props {
	options: HeadOptions	
}

const canonicalURL = new URL(Astro.url.pathname, Astro.site);
const { options: {title, description, image, noindex, nofollow, type = "website", article}} = Astro.props;

let imageSrc = ""

const images = import.meta.glob<{ default: ImageMetadata }>('/src/assets/**/*.{jpeg,jpg,png,gif,webp}');
if(image) {
	const imageGlob = await images[join("/src/assets", image.src)]()
	imageSrc = new URL(imageGlob.default.src, Astro.url.origin).toString()
} else {
	imageSrc = new URL("spots.svg", Astro.url.origin).toString()
}
---

<meta name="viewport" content="width=device-width,initial-scale=1" />

<link rel="icon" type="image/png" href="/favicon-96x96.png" sizes="96x96" />
<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
<link rel="shortcut icon" href="/favicon.ico" />

<!-- Canonical URL -->
<link rel="canonical" href={canonicalURL} />
<link rel="alternate" type="application/rss+xml" title="Library of Alexandria" href={new URL("rss.xml", Astro.site)}/>




<SEO 
	{title} 
	titleDefault='Blog'
	titleTemplate={`%s - ${SITE_TITLE}`} 
	{description}
	canonical={canonicalURL}
	{noindex}
	{nofollow}
	charset='utf-8'
	openGraph={{
		basic: {
			title,
			type,
			image: imageSrc
		},
		image: {
			alt: image?.alt ?? ""
		},
		article
	}}
	twitter={{
		title,
		card: "summary_large_image",
		image: imageSrc,
		imageAlt: image?. alt ?? "",
		description
	}}
>


<!-- Init themes in the head to prevent FUC -->
<!-- Can't be sourced from a file, otherwise the network request will cause FUC -->
<script>
import { initTheme, themes } from "../lib/themes";
themes.forEach((t) => {
	initTheme(t)
})
</script>


