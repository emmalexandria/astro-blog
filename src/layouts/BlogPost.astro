---
import { getCollection, type CollectionEntry } from 'astro:content';
import FormattedDate from '../components/FormattedDate.astro';

import BaseLayout from './BaseLayout.astro';
import type { Heading, HeadingLevel } from '../toc';
import Toc from "../components/Toc.astro"
import SeriesButtons from '../components/blog/SeriesButtons.astro';
import ScrollToTop from "../components/ScrollToTop.svelte"
import {Icon }from "astro-icon/components";
import { getSeriesPosts, type SeriesPost } from '../content.utils';

interface Props {
  post: SeriesPost | CollectionEntry<"blog">,
  series?: CollectionEntry<'series'>,
  headings: HeadingLevel[]
}


let { post, headings, series }: Props = Astro.props;

let postVal;

let nextPost, prevPost;
if(series !== undefined) {
  postVal = post as SeriesPost
  const seriesPosts = await getSeriesPosts(series, await getCollection("blog"))
  if(seriesPosts) {
    const otherPosts = seriesPosts.filter((p) => p === post).sort((a, b) => {
      return (a.index) - (b.index)
    })
    nextPost = otherPosts[postVal.index + 1]
    prevPost = otherPosts[postVal.index - 1]
  }

}

---

<BaseLayout title={post.data.title} description={post.data.description}>
  <article class="snap-y w-full md:w-content mx-auto">
    <div class="article-info">
      <div class="hero-image rounded-md overflow-clip">
        {post.data.image && (<img src={post.data.image.src} alt={post.data.image.alt} />)}
      </div>
      <div>
        <div class="mt-4">
          <h1 class="title mb-0">{post.data.title}</h1>
          {series != undefined && (
          <span class="flex flex-row">
            <p class="text-mono-700 dark:text-mono-300 m-0 text-sm">Part {(post as SeriesPost).index}: <a class="font-semibold" href={`/series/${series?.id}`}>{series?.data.name}</a></p>

          </span>
          )}
          <div class="date">
            <FormattedDate date={post.data.pubDate} />
            {
            post.data.updatedDate && (
            <div class="last-updated-on">
              Last updated on <FormattedDate date={post.data.updatedDate} />
            </div>
            )
            }
          </div>
          <div class="content">
            <Toc headings={headings}/>
          </div>
          {series && (
          <SeriesButtons  next={nextPost} prev={prevPost}/>
          )}
          <hr class="mt-2" />
        </div>
      </div>

    </div>
    <div class="content">
      <slot />
    </div>
  </article>
  <ScrollToTop client:load>
    <Icon size={24} name="lucide:arrow-up"/>
  </ScrollToTop>
</BaseLayout>

