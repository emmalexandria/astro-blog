---
import { type CollectionEntry, getCollection } from 'astro:content';
import BlogPost from '../../layouts/BlogPost.astro';
import { render } from 'astro:content';
import {nestHeadings} from "../../toc"
import BlogImage from '../../components/blog/BlogImage.astro';
import {dynamicPostFilter, getSeriesPostList, getSeriesPosts, seperatePosts, type SeriesPost} from "../../content.utils"

export async function getStaticPaths() {
  const posts = dynamicPostFilter(await getCollection('blog'));
  const series: CollectionEntry<"series">[] = await getCollection('series');

  const {seriesPostList, standalonePosts} = await seperatePosts(series, posts) 

  let retValue = [];
  retValue.push(...seriesPostList.flatMap((sp) => {
    return sp.posts.map((p) => {
      return {
        params: {slug: p.id},
        props: {post: p, series: sp.series}
      }
    })
  }))


  retValue.push(...standalonePosts.map((p) => {
    return {
      params: {slug: p.id},
      props: {post: p, series: undefined}
    }
  }))
  
  return retValue
}

interface Props {
  post: CollectionEntry<"blog"> | SeriesPost,
  series?: CollectionEntry<"series">
}

const {post, series}: Props = Astro.props;
const postVal = series !== undefined ? post as SeriesPost : post
const postRender = await render(postVal);
---

<BlogPost post={postVal} headings={nestHeadings(postRender.headings)} {series}>
  <postRender.Content components={{img: BlogImage}} />
</BlogPost>
