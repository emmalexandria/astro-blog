---
import FormattedDate from '../../components/FormattedDate.astro';
import { type Page } from 'astro';
import BaseLayout from '../../layouts/BaseLayout.astro';
import BlogCard from '../../components/blog/BlogCard.astro';
import { getPinned, getPostsAndSeries, type PostListItem } from '../../lib/content.utils';
import SeriesCard from '../../components/blog/SeriesCard.astro';

import { type GetStaticPaths } from 'astro';
import Paginator from '../../components/Paginator.astro';

export const getStaticPaths: GetStaticPaths = async ({paginate}) => {
	let items = await getPostsAndSeries()
	items.sort((a, b) => {
		if(a.data.pinned !== b.data.pinned ) {
			return Number(b.data.pinned ?? false) - Number(a.data.pinned ?? false)
		}

		return a.data.pubDate.valueOf() - b.data.pubDate.valueOf()
	})
	return paginate(items, {pageSize: 5})
}
interface Props {
	page: Page
}
const {page} = Astro.props
---

<BaseLayout title="All posts" description="All my posts">
  <section class="w-full md:w-content mx-auto">
		<h1 class="text-6xl font-display font-bold mb-4">All posts</h1>
		<ul>
		{
			page.data.map((post: PostListItem, index: number) => 
			post.isSeries ? (
			<li>
				<SeriesCard pinned={post.data.pinned} posts={post.posts} imageIdx={index} id={post.id} tags={post.data.tags} image={post.data.image}  title={post.data.title} description={post.data.description} date={post.data.pubDate} /> 
			</li>
			) : (
			<li>
				<BlogCard pinned={post.data.pinned} imageIdx={index} id={post.id} tags={post.data.tags} image={post.data.image} title={post.data.title} description={post.data.description} date={post.data.pubDate}/>
			</li>
			)

			)
			}
		</ul>
		{page.url.next && (
			<Paginator first={page.url.first} last={page.url.last} next={page.url.next} prev={page.url.prev} current={page.currentPage} total={page.lastPage}/>
		)}
	</section>
</BaseLayout>

